fastlane_version “2.93.1”

# Don't generate README files.
skip_docs

# Install provisioning pro
install_provisioning_profiles

# Make sure all changes are committed.
before_all do |lane|
 clean_build_artifacts
end

keychain_password = ENV[‘JENKINS_KEYCHAIN_PASSWORD’]
unlock_keychain(path: ‘login.keychain’, password: keychain_password) if is_ci? && keychain_password
appcenter_app_name = ''

#####################
### CONFIGURATION ###
#####################
# AppStore Configuration
APPSTORE_USERNAME = ''
APPSTORE_TEAM_NAME = ''

# AppCenter Configuration
WORKSPACE = 'ios/Runner.xcworkspace'

#Build Configuration
BUMP_BUILD_NR = 10
BUILD_NR = ENV["BUILD_NUMBER"] || ''

if BUILD_NR == ''
  sh("echo","No build nr set")
else
  BUILD_NR = Integer(BUILD_NR) + BUMP_BUILD_NR
  sh("echo","New build nr: #{BUILD_NR}")
end

####################
### PUBLIC LANES ###
####################
lane :pr do
  installFvmVersion

  Dir.chdir ".." do
    sh("fvm", "flutter", "analyze")
    sh("fvm", "flutter", "test")
    #sh("fvm", "flutter", "test", "--coverage")
    #sh("dart", "--version")
    #sh("dart", "coverage/filter_test_coverage.dart")
    #sh("python3", "coverage/lcov_cobertura.py", "coverage/lcov.info", "--output", "coverage/coverage.xml")
  end
end

lane :ci_alpha do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild

  buildAppAndroid(flavor: 'alpha')
  uploadToAppcenterAndroid(flavor: 'alpha') # Deploy the apk to AppCenter.

  buildAppIOS(flavor: 'alpha')
  uploadToAppcenterIos(flavor: 'alpha') # Deploy the apk to AppCenter.
end

lane :ci_beta do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild

  buildAppAndroid(flavor: 'beta')
  uploadToAppcenterAndroid(flavor: 'beta') # Deploy the apk to AppCenter.

  buildAppIOS(flavor: 'beta')
  uploadToAppcenterIos(flavor: 'beta') # Deploy the apk to AppCenter.
end

lane :alpha_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppAndroid(flavor: 'alpha')
  uploadToAppcenterAndroid(flavor: 'alpha') # Deploy the apk to AppCenter.
end

lane :beta_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppAndroid(flavor: 'beta')
  uploadToAppcenterAndroid(flavor: 'beta') # Deploy the apk to AppCenter.
end

lane :prod_android do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppBundleAndroid(flavor: 'prod')
  # uploadToPlaystore()
  add_tag                 # Add tag
end

lane :alpha_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppIOS(flavor: 'alpha')
  uploadToAppcenterIos(flavor: 'alpha') # Deploy the apk to AppCenter.
end

lane :beta_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppIOS(flavor: 'beta')
  uploadToAppcenterIos(flavor: 'beta') # Deploy the apk to AppCenter.
end

lane :prod_ios do
  ensure_git_status_clean # Make sure the repository is clean before starting with the beta deployment process.
  installFvmVersion

  prepareBuild
  buildAppIOS(flavor: 'prod')
  # buildAndDeployToAppStore(flavor: 'prod', configuration: 'Release-prod', identifier: 'com.icapps.fluttertemplate', apple_id: 'apple-id-are-numbers') //fill in with correct values.
  add_tag                 # Add tag
end

########################
###   PRIVATE LANES  ###
########################
private_lane :installFvmVersion do
    Dir.chdir ".." do
      sh("bash", "./tool/install_fvm.sh")
    end
end

private_lane :prepareBuild do
    Dir.chdir ".." do
      sh("fvm", "flutter", "packages", "get")
      sh("fvm", "flutter", "clean")
    end
end

private_lane :buildAppAndroid do |options|
    Dir.chdir ".." do
      sh("fvm", "flutter", "build", "apk", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--obfuscate", "--split-debug-info=./build/debug-info/#{options[:flavor]}", "--build-number=#{BUILD_NR}")    # Build the application
    end
end

private_lane :buildAppBundleAndroid do |options|
    Dir.chdir ".." do
      sh("fvm", "flutter", "build", "appbundle", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--build-number=#{BUILD_NR}")    # Build the application
    end
end

private_lane :buildAppIOS do |options|
    Dir.chdir ".." do
      podRepoUpdate
      sh("fvm", "flutter", "build", "ios", "--release", "--flavor", options[:flavor], "-t" "lib/main_#{options[:flavor]}.dart", "--no-codesign", "--obfuscate", "--split-debug-info=./build/debug-info/#{options[:flavor]}", "--build-number=#{BUILD_NR}")    # Build the application
      convertAppToIpa(flavor: options[:flavor])
    end
end

private_lane :podRepoUpdate do |options|
      Dir.chdir "ios" do
        sh("pod", "repo", "update")
      end
end

private_lane :convertAppToIpa do |options|
     Dir.chdir "ios" do
        gym(
            workspace: WORKSPACE,
            scheme: options[:flavor],
            configuration: "Release-#{options[:flavor]}",
            export_options: {
                method: "enterprise",
                provisioningProfiles: {
                    "com.icapps.fluttertemplate.dev" => "Flutter Template Debug",
                    "com.icapps.fluttertemplate.alpha" => "Flutter Template Alpha",
                    "com.icapps.fluttertemplate.beta" => "Flutter Template Beta",
                    "com.icapps.fluttertemplate" => "Flutter Template Production"
                }
            }
        )
    end
end

private_lane :uploadToAppcenterAndroid do |options|
  getAppNameAndroid(flavor: options[:flavor])
  appcenter_upload(
    app_name: appcenter_app_name,
    apk: "./build/app/outputs/apk/#{options[:flavor]}/release/app-#{options[:flavor]}-release.apk",
    notify_testers: true,
    destinations: "*"
  )
end

private_lane :uploadToAppcenterIos do |options|
  getAppNameIOS(flavor: options[:flavor])
  appcenter_upload(
    app_name: appcenter_app_name,
    notify_testers: true,
    destinations: "*"
  )
end

private_lane :add_tag do
  add_git_tag(build_number: BUILD_NR)
end

private_lane :getAppNameAndroid do |options|
    flavor = options[:flavor]
    if flavor == "alpha" &&
        appcenter_app_name = "FlutterTemplate-Android-Alpha"
    elsif flavor == "beta"
        appcenter_app_name = "FlutterTemplate-Android-Beta"
    elsif flavor == "prod"
        appcenter_app_name = "FlutterTemplate-Android"
    end
end


private_lane :getAppNameIOS do |options|
    flavor = options[:flavor]
    if flavor == "alpha" &&
        appcenter_app_name = "FlutterTemplate-iOS-Alpha"
    elsif flavor == "beta"
        appcenter_app_name = "FlutterTemplate-iOS-Beta"
    elsif flavor == "prod"
        appcenter_app_name = "FlutterTemplate-iOS"
    end
end

private_lane :buildAndDeployToAppStore do |options|
  buildIosAppStore options
  deployToAppStore options
end

private_lane :buildIosAppStore do |options|
    gym(
      workspace:     WORKSPACE,
      scheme:        options[:flavor],
      configuration: options[:configuration],
      clean:         true,
      export_options: {
        method: 'app-store',
        provisioningProfiles: {
            "com.icapps.fluttertemplate.dev" => "Flutter Template Debug",
            "com.icapps.fluttertemplate.alpha" => "Flutter Template Alpha",
            "com.icapps.fluttertemplate.beta" => "Flutter Template Beta",
            "com.icapps.fluttertemplate" => "Flutter Template Production"
        }
      }
    )
end

private_lane :deployToAppStore do |options|
  pilot(
    username:                          APPSTORE_USERNAME,
    team_name:                         APPSTORE_TEAM_NAME,
    team_id:                           APPSTORE_TEAM_ID,
    app_identifier:                    options[:identifier],
    apple_id:                          options[:apple_id],
    skip_submission:                   true,
    skip_waiting_for_build_processing: true,
  )
end
